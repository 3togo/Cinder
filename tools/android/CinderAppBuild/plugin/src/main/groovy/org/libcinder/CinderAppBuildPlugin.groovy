package org.libcinder

import org.gradle.api.Project
import org.gradle.api.Plugin

class CinderAppBuildPlugin implements Plugin<Project> {
    def mSourceFiles  = []
    def mIncludeDirs  = []
    def mSharedLibs   = []
    def mStaticLibs   = []
    def mStaticBlocks = []

    void parseSourceFiles(Project project) {
        this.mSourceFiles = []
        if( ! project.cinder.srcDirs.empty ) {
            this.mSourceFiles.add("\\")
            project.cinder.srcDirs.each {
                def dir = new File("${project.projectDir}/" + it)                                       
                dir.eachFile() {
                    String path = it.canonicalPath.toString()
                    if( ! it.name.startsWith( "." ) ) {
                        this.mSourceFiles.add("\t" + path + " \\")
                    }
                }
            }
        }
    }

    void parseIncludeDirs(Project project) {
        this.mIncludeDirs = []
        if( ! project.cinder.includeDirs.empty ) {
            this.mIncludeDirs.add("\\")
            project.cinder.includeDirs.each {
                String path = (new File("${project.projectDir}/" + it)).canonicalPath.toString()
                this.mIncludeDirs.add("\t" + path + " \\")
            }
        }
    }

    void parseSharedLibs(Project project) {
        this.mSharedLibs = []
        if( ! project.cinder.ldLibs.empty ) { 
            mSharedLibs.add("\\")
            project.cinder.ldLibs.each {
                mSharedLibs.add("\t" + "-l" + it + "\\")
            }
        }
    }

    void parseStaticLibs(Project project) {
        this.mStaticLibs = []
        this.mStaticBlocks = []
        if( ! project.cinder.staticLibs.empty ) {
            this.mStaticLibs.add("\\")
            project.cinder.staticLibs.each {
                String path = (new File(it)).canonicalPath.toString()

                // short name
                String shortName = path
                def lastSlashPos = shortName.lastIndexOf( "/" )
                if( -1 != lastSlashPos ) {
                    shortName = shortName.substring(lastSlashPos + 1, shortName.length())
                }
                shortName = shortName.replace(".a", "")
                this.mStaticLibs.add("\t" + shortName + " \\")


                this.mStaticBlocks.add("include \$(CLEAR_VARS)")
                this.mStaticBlocks.add("LOCAL_MODULE    := " + shortName)
                this.mStaticBlocks.add("LOCAL_SRC_FILES := " + path)
                this.mStaticBlocks.add("include \$(PREBUILT_STATIC_LIBRARY)")
                this.mStaticBlocks.add("")
            }
        }
    }

    void writeAndroidMk(Project project, String filePath) {
        def lines = []
        lines.add("# Generated by CinderAppBuildPlugin")
        lines.add("#")
        lines.add("LOCAL_PATH := \$(call my-dir)")
        lines.add("")           
        lines.add(this.mStaticBlocks.join("\n"))
        lines.add("# ------------------------------------------------------------------------------")
        lines.add("")
        lines.add("include \$(CLEAR_VARS)")
        lines.add("")
        lines.add("# Module Name" )
        lines.add("LOCAL_MODULE := ${project.cinder.moduleName}")
        lines.add("")
        lines.add("# C++ Source Files" )
        lines.add("LOCAL_SRC_FILES := "+ this.mSourceFiles.join("\n"))
        lines.add("")
        lines.add("# C++ Flags" )
        lines.add("LOCAL_CPPFLAGS += ${project.cinder.cppFlags}")
        lines.add("")
        lines.add("# Include Directories" )
        lines.add("LOCAL_C_INCLUDES := " + this.mIncludeDirs.join("\n"))
        lines.add("")
        lines.add("# Shared Libraries" )
        lines.add("LOCAL_LDLIBS := " + this.mSharedLibs.join("\n"))
        lines.add("")
        lines.add("# Static Libraries" )
        lines.add("LOCAL_STATIC_LIBRARIES := " + this.mStaticLibs.join("\n"))
        lines.add("")
        lines.add("include \$(BUILD_SHARED_LIBRARY)")
        lines.add("")
        lines.add("")
        
        def outFile = new File( "${filePath}" )
        outFile.text = lines.join("\n")

        if( outFile.exists() ) {
            println "Wrote ${filePath}"
        }
    }
    

    void apply(Project project) {
        project.extensions.create("cinder", CinderAppBuildPluginExtension)

        def buildDir = project.buildDir;
        def buildType = 'unset' /// CHANGE TO: debug AFTER TESTING
        
        // Extract selected build type from app.iml
        def parsedXml = (new XmlSlurper()).parse("${project.projectDir}/app.iml")
        def nodes = parsedXml.depthFirst().findAll { it.name() == 'option' && it.@name == 'SELECTED_BUILD_VARIANT' }
        if( ! nodes.empty ) {
            buildType = nodes[0].@value
        }
       
        // TASK: cinderGenerateAndroidMk 
        project.task( 'cinderGenerateAndroidMk' ) << {
            def dirPath = "${buildDir}/cinder-ndk/${buildType}"
            def filePath = "${dirPath}/Android.mk" 
            def outDir  = new File( "${dirPath}" )
            if( ! outDir.exists() ) {
                outDir.mkdirs()
                println "Created ${dirPath}"
            }

            // Parse
            this.parseSourceFiles(project)
            this.parseIncludeDirs(project)
            this.parseSharedLibs(project)
            this.parseStaticLibs(project)

            // Write
            this.writeAndroidMk(project, filePath)
        }  

        // TASK: cinderGenerateApplicationMk
        project.task( 'cinderGenerateApplicationMk', dependsOn: 'cinderGenerateAndroidMk' ) << {
        }

        // TASK: cinderGenerateNdkBuild
        project.task( 'cinderGenerateNdkBuild', dependsOn: 'cinderGenerateApplicationMk' ) << {
        }
    }
}

class CinderAppBuildPluginExtension {
    def String moduleName = ""
    def srcDirs = []
    def String cppFlags = ""
    def includeDirs = []
    def ldLibs = []
    def staticLibs = []
    def stl = "gnustl_static"
}

